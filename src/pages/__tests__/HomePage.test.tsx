import { render, screen, fireEvent } from '@testing-library/react';
import { BrowserRouter } from 'react-router-dom';
import { HomePage } from '../HomePage';
import { LanguageProvider } from '@/contexts/LanguageContext';
import { AudioProvider } from '@/contexts/AudioContext';
import * as AudioContext from '@/contexts/AudioContext';

// Mock the useAudio hook
jest.mock('@/contexts/AudioContext', () => ({
  ...jest.requireActual('@/contexts/AudioContext'),
  useAudio: jest.fn(),
}));

const AllTheProviders = ({ children }: { children: React.ReactNode }): JSX.Element => {
  return (
    <BrowserRouter>
      <LanguageProvider>
        <AudioProvider>{children}</AudioProvider>
      </LanguageProvider>
    </BrowserRouter>
  );
};

describe('HomePage', () => {
  beforeEach(() => {
    localStorage.clear();
    // Setup default mock for useAudio
    (AudioContext.useAudio as jest.Mock).mockReturnValue({
      playSound: jest.fn(),
      speak: jest.fn(),
    });
  });

  it('„É¶„Éº„Ç∂„ÉºÂêç„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
    localStorage.setItem('userName', '„Åü„Çç„ÅÜ');

    render(<HomePage />, { wrapper: AllTheProviders });

    const header = screen.getByRole('heading', { level: 1 });
    expect(header).toHaveTextContent('„Åì„Çì„Å´„Å°„ÅØ, „Åü„Çç„ÅÜ! üëã');
  });

  it('„É¶„Éº„Ç∂„ÉºÂêç„Åå„Å™„ÅÑÂ†¥Âêà„ÇÇÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
    render(<HomePage />, { wrapper: AllTheProviders });

    // „Éò„ÉÉ„ÉÄ„Éº„ÅÆË¶ÅÁ¥†„ÇíÂèñÂæó
    const header = screen.getByRole('heading', { level: 1 });
    expect(header).toHaveTextContent('„Åì„Çì„Å´„Å°„ÅØ, ! üëã');
  });

  it('„Ç≤„Éº„É†„Ç´„Éº„Éâ„Åå3„Å§Ë°®Á§∫„Åï„Çå„Çã', () => {
    render(<HomePage />, { wrapper: AllTheProviders });

    expect(screen.getByText('„Ç¢„É´„Éï„Ç°„Éô„ÉÉ„Éà')).toBeInTheDocument();
    expect(screen.getByText('„Åü„Çì„Åî')).toBeInTheDocument();
    expect(screen.getByText('„Åä„ÅØ„Å™„Åó')).toBeInTheDocument();

    expect(screen.getByText('üî§')).toBeInTheDocument();
    expect(screen.getByText('üìö')).toBeInTheDocument();
    expect(screen.getByText('üìñ')).toBeInTheDocument();
  });

  it('ÈÄ≤Êçó„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
    render(<HomePage />, { wrapper: AllTheProviders });

    const progressButton = screen.getByText(/„Åå„Åè„Åó„ÇÖ„ÅÜ„Åç„Çç„Åè/);
    expect(progressButton).toBeInTheDocument();
    expect(progressButton.textContent).toContain('üìä');
  });

  it('„Ç≤„Éº„É†„Ç´„Éº„Éâ„Çí„ÇØ„É™„ÉÉ„ÇØ„Åß„Åç„Çã', () => {
    const mockPlaySound = jest.fn();
    (AudioContext.useAudio as jest.Mock).mockReturnValue({
      playSound: mockPlaySound,
      speak: jest.fn(),
    });

    render(<HomePage />, { wrapper: AllTheProviders });

    const alphabetCard = screen.getByRole('button', { name: /Play „Ç¢„É´„Éï„Ç°„Éô„ÉÉ„Éà game/ });
    fireEvent.click(alphabetCard);

    expect(mockPlaySound).toHaveBeenCalledWith('click');
  });

  it('ÈÄ≤Êçó„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åß„Åç„Çã', () => {
    const mockPlaySound = jest.fn();
    (AudioContext.useAudio as jest.Mock).mockReturnValue({
      playSound: mockPlaySound,
      speak: jest.fn(),
    });

    render(<HomePage />, { wrapper: AllTheProviders });

    const progressButton = screen.getByText(/„Åå„Åè„Åó„ÇÖ„ÅÜ„Åç„Çç„Åè/);
    fireEvent.click(progressButton);

    expect(mockPlaySound).toHaveBeenCalledWith('click');
  });
});
